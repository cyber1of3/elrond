#!/usr/bin/env python3 -tt
def doHTML(): # insert IOC/detection strings etc into relevant pages
    header = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <p><font size=\"3\"><strong>Description</strong></font></p>\n      <ul>\n        <li>"
    iocs = "</li>\n      </ul>\n    <p><font size=\"3\"><strong>Indicators of Compromise</strong></font></p>\n      <ul>\n        <li>"
    headings = "</li>\n      </ul>\n  </head>\n  <body>\n    <br/>\n    <table id=\"mitre\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"15%\">Operating Systems</th>\n        <th width=\"35%\">Tactics</th>\n        <th width=\"45%\">Sub-Techniques</th>\n      </tr>\n      <tr>\n        <td>&nbsp;"
    related = "</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td>"
    insert = "</td>\n      </tr>\n      <tr>\n        <td>"
    mitigations = "</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Mitigations</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"15%\">Mitigation</th>\n        <th width=\"85%\">Description</th>\n      </tr>\n      <tr>\n        <td>&nbsp;"
    footer = "</td>\n      </tr>\n    </table>\n    <br/>\n    <table id=\"break\">\n      <tr>\n        <th></th>\n      </tr>\n    </table>\n  </body>\n</html>"
    # Initial Access
    with open(sd+"t1189.html", "w") as t1189html:
        t1189html.write("{}Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.</li>\n        <li>".format(header)) # description
        t1189html.write("Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.</li>\n        <li>") # description
        t1189html.write("Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.</li>\n        <li>") # description
        t1189html.write("Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.") # description
        t1189html.write("{}</li>\n        <li>".format(iocs)) # indicator regex assignments
        t1189html.write("</li>\n        <li>") # indicator regex assignments
        t1189html.write("{}T1189</td>\n        <td>&nbsp;".format(headings))
        t1189html.write("Windows, macOS, Linux, SaaS</td>\n        <td>&nbsp;") # platforms
        t1189html.write("Initial Access</td>\n        <td>&nbsp;") # tactics
        t1189html.write("N/A") # sub-techniques
        t1189html.write("{}<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1211\">&nbsp;T1550</a></td>\n        <td>&nbsp;".format(related)) # related_technique
        t1189html.write("Use Alternate Authentication Material: Application Access Token")
        t1189html.write("{}<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1528\">&nbsp;T1528</a></td>\n        <td>&nbsp;".format(insert)) # related_technique
        t1189html.write("Steal Application Access Token")
        t1189html.write("{}Application Isolation and Sandboxing</td>\n        <td>&nbsp;".format(mitigations)) # mitigation
        t1189html.write("Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.<br>&nbsp;Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist for these types of systems.{}&nbsp;".format(insert))
        t1189html.write("Exploit Protection</td>\n        <td>&nbsp;") # mitigation
        t1189html.write("Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.<br>&nbsp;Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. Many of these protections depend on the architecture and target application binary for compatibility.{}&nbsp;".format(insert))
        t1189html.write("Restrict Web-Based Content</td>\n        <td>&nbsp;") # mitigation
        t1189html.write("For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.<br>&nbsp;")
        t1189html.write("Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process{}&nbsp;".format(insert))
        t1189html.write("Update Software</td>\n        <td>&nbsp;") # mitigation
        t1189html.write("Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique. Use modern browsers with security features turned on.{}".format(footer))
    with open(sd+"t1190.html", "w") as t1190html:
        t1190html.write("Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability.</li>\n        <li>These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include Exploitation for Defense Evasion.</li>\n        <li>If an application is hosted on cloud-based infrastructure, then exploiting it may lead to compromise of the underlying instance. This can allow an adversary a path to access the cloud APIs or to take advantage of weak identity and access management policies.</li>\n        <li>For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.")
        t1190html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1190html.write("T1190</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Initial Access</td>\n        <td>&nbsp;N/A")
        t1190html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1211\">&nbsp;T1211</a></td>\n        <td>&nbsp;Exploitation for Defense Evasion")
    with open(sd+"t1133.html", "w") as t1133html:
        t1133html.write("Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations.</li>\n        <li>There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management can also be used externally.</li>\n        <li>Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.</li>\n        <li>Access to remote services may be used as a redundant or persistent access mechanism during an operation.")
        t1133html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1133html.write("T1133</td>\n        <td>&nbsp;Windows, Linux</td>\n        <td>&nbsp;Initial Access, Persistence</td>\n        <td>&nbsp;N/A")
        t1133html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services: Windows Remote Management</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts")
    with open(sd+"t1200.html", "w") as t1200html:
        t1200html.write("Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access.</li>\n        <li>While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access.</li>\n        <li>Commercial and open source products are leveraged with capabilities such as passive network tapping, man-in-the middle encryption breaking, keystroke injection, kernel memory reading via DMA, adding new wireless access to an existing network, and others")
        t1200html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1200html.write("T1200</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Initial Access</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1566.html", "w") as t1566html:
        t1566html.write("Adversaries may send phishing messages to elicit sensitive information and/or gain access to victim systems. All forms of phishing are electronically delivered social engineering.</li>\n        <li>Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary.</li>\n        <li>More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.</li>\n        <li>Adversaries may send victim’s emails containing malicious attachments or links, typically to execute malicious code on victim systems or to gather credentials for use of Valid Accounts.</li>\n        <li>Phishing may also be conducted via third-party services, like social media platforms.")
        t1566html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1566html.write("T1566</td>\n        <td>&nbsp;Windows, macOS, Linux, Office 365, SaaS</td>\n        <td>&nbsp;Initial Access</td>\n        <td>&nbsp;T1566.001: Spearphishing Attachment<br>&nbsp;T1566.002: Spearphishing Link<br>&nbsp;T1566.003: Spearphishing via Service")
        t1566html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts")
    with open(sd+"t1091.html", "w") as t1091html:
        t1091html.write("Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes.</li>\n        <li>In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.</li>\n        <li>In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system.")
        t1091html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1091html.write("T1091</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Initial Access, Lateral Movement</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1195.html", "w") as t1195html:
        t1195html.write("Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.</li>\n        <li>Supply chain compromise can take place at any stage of the supply chain including:</li>\n        <ul>\n          <li>Manipulation of development tools</li>\n          <li>Manipulation of a development environment</li>\n          <li>Manipulation of source code repositories (public or private)</li>\n          <li>Manipulation of source code in open-source dependencies</li>\n          <li>Manipulation of software update/distribution mechanisms</li>\n          <li>Compromised/infected system images (multiple cases of removable media infected at the factory)</li>\n          <li>Replacement of legitimate software with modified versions</li>\n          <li>Sales of modified/counterfeit products to legitimate distributors</li>\n          <li>Shipment interdiction</li>\n        </ul>\n        <li>While supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.</li>\n        <li>Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.</li>\n        <li>Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.")
        t1195html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1195html.write("T1195</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Initial Access</td>\n        <td>&nbsp;T1195: Compromise Software Dependencies and Development Tools<br>&nbsp;T1195: Compromise Software Supply Chain<br>&nbsp;T1195: Compromise Hardware Supply Chain")
    with open(sd+"t1199.html", "w") as t1199html:
        t1199html.write("Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.</li>\n        <li>Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments.</li>\n        <li>Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise.</li>\n        <li>As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.")
        t1199html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1199html.write("T1199</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, SaaS</td>\n        <td>&nbsp;Initial Access</td>\n        <td>&nbsp;N/A")
        t1199html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts")
    with open(sd+"t1078.html", "w") as t1078html:
        t1078html.write("Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.</li>\n        <li>Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.</li>\n        <li>Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network.</li>\n        <li>Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.</li>\n        <li>The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.")
        t1078html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1078html.write("T1078</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Initial Access, Persistence, Privilege Escalation, Defense Evasion</td>\n        <td>&nbsp;T1078: Default Accounts<br>&nbsp;T1078: Domain Accounts<br>&nbsp;T1078: Local Accounts<br>&nbsp;T1078: Cloud Accounts")
    # Execution
    with open(sd+"t1059.html", "w") as t1059html:
        t1059html.write("Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.</li>\n        <li>There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.</li>\n        <li>Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model.</li>\n        <li>Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.")
        t1059html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1059html.write("T1059</td>\n        <td>&nbsp;Windows, macOS, Linux, Network</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;T1059.001: PowerShell<br>&nbsp;T1059.002: AppleScript<br>&nbsp;T1059.003: Windows Command Shell<br>&nbsp;T1059.004: Unix Shell<br>&nbsp;T1059.005: Visual Basic<br>&nbsp;T1059.006: Python<br>&nbsp;T1059.007: JavaScript<br>&nbsp;T1059.008: Network Device CLI")
        t1059html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1559\">&nbsp;T1559</a></td>\n        <td>&nbsp;Inter-Process Communication")
    with open(sd+"t1609.html", "w") as t1609html:
        t1609html.write("Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.</li>\n        <li>In Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as docker exec to execute a command within a running container.</li>\n        <li>In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as kubectl exec.")
        t1609html.write("<li>docker exec</li>\n        <li>kubectl exec</li>")
        t1609html.write("T1559</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;N/A")
        t1609html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1610\">&nbsp;T1610</a></td>\n        <td>&nbsp;Deploy Container")
    with open(sd+"t1610.html", "w") as t1610html:
        t1610html.write("Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.</li>\n        <li>Containers can be deployed by various means, such as via Docker's create and start APIs or via a web application such as the Kubernetes dashboard or Kubeflow. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.")
        t1610html.write("<li>docker create</li>\n        <li>docker start</li>")
        t1610html.write("T1610</td>\n        <td>&nbsp;Containers</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;N/A")
        t1610html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1610\">&nbsp;T1609</a></td>\n        <td>&nbsp;Container Administration Command")
    with open(sd+"t1203.html", "w") as t1203html:
        t1203html.write("Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior.</li>\n        <li>Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution.</li>\n        <li>Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system.</li>\n        <li>Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.</li>\n        <li>Several types exist:</li>\n        <ul>\n          <li>Browser-based Exploitation</li>\n          <ul>\n            <li>Web browsers are a common target through Drive-by Compromise and Spearphishing Link.</li>\n            <li>Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser.</li>\n            <li>These often do not require an action by the user for the exploit to be executed.\n          </ul>\n          <li>Office Applications</li>\n          <ul>\n            <li>Common office and productivity applications such as Microsoft Office are also targeted through Phishing.</li>\n            <li>Malicious files will be transmitted directly as attachments or through links to download them.</li>\n            <li>These require the user to open the document or file for the exploit to run.\n          </ul>\n          <li>Common Third-party Applications</li>\n          <ul>\n            <li>Other applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation.</li>\n            <li>Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems.</li>\n            <li>Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file.</li>\n            <li>For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.")
        t1203html.write("T1203</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;N/A")
        t1203html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1189\">&nbsp;T1189</a></td>\n        <td>&nbsp;Drive-by Compromise</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1566\">&nbsp;T1566</a></td>\n        <td>&nbsp;Phishing")
        t1203html.write("Application Isolation and Sandboxing</td>\n        <td>&nbsp;Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.<br>&nbsp;Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist for these types of systems.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Exploit Protection</td>\n        <td>&nbsp;Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.<br>&nbsp;Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. Many of these protections depend on the architecture and target application binary for compatibility.")")
    with open(sd+"t1559.html", "w") as t1559html:
        t1559html.write("Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms.</li>\n        <li>Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.</li>\n        <li>There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript/JScript and Visual Basic.</li>\n        <li>Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2.</li>\n        <li>Adversaries may also execute commands through interactive terminals/shells.")
        t1559html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1559html.write("T1059</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;T1059.001: PowerShell<br>&nbsp;T1059.002: AppleScript<br>&nbsp;T1059.003: Windows Command Shell<br>&nbsp;T1059.004: Unix Shell<br>&nbsp;T1059.005: Visual Basic<br>&nbsp;T1059.006: Python<br>&nbsp;T1059.007: JavaScript/JScript")
    with open(sd+"t1106.html", "w") as t1106html:
        t1106html.write("Adversaries may directly interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.</li>\n        <li>These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.</li>\n        <li>Functionality provided by native APIs are often also exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.</li>\n        <li>This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.</li>\n        <li>Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.</li>\n        <li>Adversaries may abuse these native API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces, provide mechanisms to interact with and utilize various components of a victimized system.")
        t1106html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1106html.write("T1106</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;N/A")
        t1106html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1059\">&nbsp;T1059</a></td>\n        <td>&nbsp;Command and Scripting Interpreter")
    with open(sd+"t1053.html", "w") as t1053html:
        t1053html.write("Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time.</li>\n        <li>A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments).</li>\n        <li>Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.</li>\n        <li>Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).")
        t1053html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1053html.write("T1133</td>\n        <td>&nbsp;Windows, Linux</td>\n        <td>&nbsp;Execution, Persistence, Privilege Escalation</td>\n        <td>&nbsp;T1053.001: At (Linux)<br>&nbsp;T1053.002: At (Windows)<br>&nbsp;T1053.003: Cron<br>&nbsp;T1053.004: Launchd<br>&nbsp;T1053.005: Scheduled Task")
    with open(sd+"t1129.html", "w") as t1129html:
        t1129html.write("Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths.</li>\n        <li>This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess, LoadLibrary, etc. of the Win32 API.")
        t1129html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1129html.write("T1129</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;N/A")
        t1129html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1106\">&nbsp;T1106</a></td>\n        <td>&nbsp;Native API")
    with open(sd+"t1072.html", "w") as t1072html:
        t1072html.write("Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network.</li>\n        <li>Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).</li>\n        <li>Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system.</li>\n        <li>The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.</li>\n        <li>The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required.</li>\n        <li>However, the system may require an administrative account to log in or to perform it's intended purpose.")
        t1072html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1072html.write("T1072</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Execution, Lateral Movement</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1569.html", "w") as t1569html:
        t1569html.write("Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services.</li>\n        <li>Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.")
        t1569html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1569html.write("T1569</td>\n        <td>&nbsp;Windows, macOS</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;T1569.001: Launchctl<br>&nbsp;T1569.002: Service Execution")
        t1569html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1543\">&nbsp;T1543</a></td>\n        <td>&nbsp;Create or Modify System Process")
    with open(sd+"t1204.html", "w") as t1204html:
        t1204html.write("An adversary may rely upon specific actions by a user in order to gain execution.</li>\n        <li>Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link.</li>\n        <li>These user actions will typically be observed as follow-on behavior from forms of Phishing.</li>\n        <li>While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it.</li>\n        <li>This activity may also be seen shortly after Internal Spearphishing.")
        t1204html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1204html.write("T1204</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;T1204.001: Malicious Link<br>&nbsp;T1204.002: Malicious File")
        t1204html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1566\">&nbsp;T1566</a></td>\n        <td>&nbsp;Phishing</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1534\">&nbsp;T1534</a></td>\n        <td>&nbsp;Internal Phishing")
    with open(sd+"t1047.html", "w") as t1047html:
        t1047html.write("Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components.</li>\n        <li>It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.</li>\n        <li>An adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement.")
        t1047html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1047html.write("T1047</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;N/A")
    # Persistence
    with open(sd+"t1098.html", "w") as t1098html:
        t1098html.write("Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups.</li>\n        <li>These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.</li>\n        <li>In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.")
        t1098html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1098html.write("T1098</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365</td>\n        <td>&nbsp;Persistence</td>\n        <td>&nbsp;T1098.001: Additional Azure Service Principal Credentials<br>&nbsp;T1098.002: Exchange Email Delegate Permissions<br>&nbsp;T1098.003: Add Office 365 Global Administrator Role<br>&nbsp;T1098.004: SSH Authorized Keys")
    with open(sd+"t1197.html", "w") as t1197html:
        t1197html.write("Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM).</li>\n        <li>BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.</li>\n        <li>The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.</li>\n        <li>Adversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.</li>\n        <li>BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).</li>\n        <li>BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.")
        t1197html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1197html.write("T1197</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Persistence, Defense Evasion</td>\n        <td>&nbsp;N/A")
        t1197html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1559\">&nbsp;T1559</a></td>\n        <td>&nbsp;Inter-Process Communication: Component Object Model</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1059\">&nbsp;T1059</a></td>\n        <td>&nbsp;Command and Scripting Interpreter: PowerShell</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1048\">&nbsp;T1048</a></td>\n        <td>&nbsp;Exfiltration Over Alternative Protocol")
    with open(sd+"t1547.html", "w") as t1547html:
        t1547html.write("Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.</li>\n        <li>These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.</li>\n        <li>Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.")
        t1547html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1547html.write("T1547</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence, Privilege Escalation</td>\n        <td>&nbsp;T1547.001: Registry Run Keys/Startup Folder<br>&nbsp;T1547.002: Authentication Package<br>&nbsp;T1547.003: Time Providers<br>&nbsp;T1547.004: Winlogon Helper DLL<br>&nbsp;T1547.005: Security Support Provider<br>&nbsp;T1547.006: Kernel Modules and Extensions<br>&nbsp;T1547.007: Re-opened Applications<br>&nbsp;T1547.008: LSASS Driver<br>&nbsp;T1547.009: Shortcut Modification<br>&nbsp;T1547.010: Port Monitors<br>&nbsp;T1547.011: Plist Modification<br>")")
    with open(sd+"t1037.html", "w") as t1037html:
        t1037html.write("Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence.</li>\n        <li>Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.</li>\n        <li>Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.</li>\n        <li>An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.")
        t1037html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1037html.write("T1037</td>\n        <td>&nbsp;Windows, macOS</td>\n        <td>&nbsp;Persistence, Privilege Escalation</td>\n        <td>&nbsp;T1037.001: Logon Script (Windows)<br>&nbsp;T1037.002: Logon Script (Mac)<br>&nbsp;T1037.003: Network Logon Script<br>&nbsp;T1037.004: Rc.common<br>&nbsp;T1037.005: Startup Items")
    with open(sd+"t1176.html", "w") as t1176html:
        t1176html.write("Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers.</li>\n        <li>They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.</li>\n        <li>Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system.</li>\n        <li>Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials) and be used as an installer for a RAT for persistence.</li>\n        <li>There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions. There have also been similar examples of extensions being used for command & control.")
        t1176html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1176html.write("T1176</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1554.html", "w") as t1554html:
        t1554html.write("Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server.</li>\n        <li>Common client software types are SSH clients, FTP clients, email clients, and web browsers.</li>\n        <li>Adversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one.</li>\n        <li>Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.")
        t1554html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1554html.write("T1554</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1136.html", "w") as t1136html:
        t1136html.write("Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.</li>\n        <li>Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.")
        t1136html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1136html.write("T1136</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365</td>\n        <td>&nbsp;Persistence</td>\n        <td>&nbsp;T1136.001: Local Account<br>&nbsp;T1136.002: Domain Account<br>&nbsp;T1136.003: Cloud Account")
    with open(sd+"t1543.html", "w") as t1543html:
        t1543html.write("Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions.</li>\n        <li>On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.</li>\n        <li>Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.</li>\n        <li>Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.")
        t1543html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1543html.write("T1543</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence, Privilege Escalation</td>\n        <td>&nbsp;T1543.001: Launch Agent<br>&nbsp;T1543.002: Systemd Service<br>&nbsp;T1543.003: Windows Service<br>&nbsp;T1543.004: Launch Daemon")
    with open(sd+"t1546.html", "w") as t1546html:
        t1546html.write("Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries.</li>\n        <li>Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.</li>\n        <li>Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.")
        t1546html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1546html.write("T1546</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence, Privilege Escalation</td>\n        <td>&nbsp;T1546.001: Change Default File Association<br>&nbsp;T1546.002: Screensaver<br>&nbsp;T1546.003: Windows Management Instrumentation Event Subscription<br>&nbsp;T1546.004: .bash_profile and .bashrc<br>&nbsp;T1546.005: Trap<br>&nbsp;T1546.006: LC_LOAD_DYLIB Addition<br>&nbsp;T1546.007: Netsh Helper DLL<br>&nbsp;T1546.008: Accessibility Features<br>&nbsp;T1546.009: AppCert DLLs<br>&nbsp;T1546.010: AppInit DLLs<br>&nbsp;T1546.011: Application Shimming<br>&nbsp;T1546.012: Image File Execution Options Injection<br>&nbsp;T1546.013: PowerShell Profile<br>&nbsp;T1546.014: Emond<br>&nbsp;T1546.015: Component Object Model Hijacking")")
    with open(sd+"t1574.html", "w") as t1574html:
        t1574html.write("Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time.</li>\n        <li>Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.</li>\n        <li>There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted.</li>\n        <li>Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.")
        t1574html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1574html.write("T1574</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence, Privilege Escalation, Defense Evasion</td>\n        <td>&nbsp;T1574.001: DLL Search Order Hijacking<br>&nbsp;T1574.002: DLL Side-Loading<br>&nbsp;T1574.004: Dylib Hijacking<br>&nbsp;T1574.005: Executable Installer File Permissions Weakness<br>&nbsp;T1574.006: LD_PRELOAD<br>&nbsp;T1574.007: Path Interception by PATH Environment Variable<br>&nbsp;T1574.008: Path Interception by Search Order Hijacking<br>&nbsp;T1574.009: Path Interception by Unquoted Path<br>&nbsp;T1574.010: Services File Permissions Weakness<br>&nbsp;T1574.011: Services Registry Permissions Weakness<br>&nbsp;T1574.012: COR_PROFILER")
    with open(sd+"t1525.html", "w") as t1525html:
        t1525html.write("Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored.</li>\n        <li>Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.</li>\n        <li>A tool has been developed to facilitate planting backdoors in cloud container images. If an attacker has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a Web Shell.</li>\n        <li>Adversaries may also implant Docker images that may be inadvertently used in cloud deployments, which has been reported in some instances of cryptomining botnets.")
        t1525html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1525html.write("T1525</td>\n        <td>&nbsp;AWS, Azure, GCP</td>\n        <td>&nbsp;Persistence</td>\n        <td>&nbsp;N/A")
        t1525html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1505\">&nbsp;T1505</a></td>\n        <td>&nbsp;Server Software Component: Web Shell")
    with open(sd+"t1556.html", "w") as t1556html:
        t1556html.write("Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts.</li>\n        <li>The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.</li>\n        <li>Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms.</li>\n        <li>Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.")
        t1556html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1556html.write("T1556</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion, Credential Access</td>\n        <td>&nbsp;T1556.001: Domain Controller Authentication<br>&nbsp;T1556.002: Password Filter DLL<br>&nbsp;T1556.003: Pluggable Authentication Modules")
    with open(sd+"t1137.html", "w") as t1137html:
        t1137html.write("Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network.</li>\n        <li>There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.</li>\n        <li>A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.")
        t1137html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1137html.write("T1137</td>\n        <td>&nbsp;Windows, Office 365</td>\n        <td>&nbsp;Persistence</td>\n        <td>&nbsp;T1137.001: Office Template Macros<br>&nbsp;T1137.002: Office Test<br>&nbsp;T1137.003: Outlook Forms<br>&nbsp;T1137.004: Outlook Home Page<br>&nbsp;T1137.005: Outlook Rules<br>&nbsp;T1137.006: Add-ins")
    with open(sd+"t1542.html", "w") as t1542html:
        t1542html.write("Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system.</li>\n        <li>These programs control flow of execution before the operating system takes control.</li>\n        <li>Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system.</li>\n        <li>This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.")
        t1542html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1542html.write("T1542</td>\n        <td>&nbsp;Windows, Linux</td>\n        <td>&nbsp;Persistence, Defense Evasion</td>\n        <td>&nbsp;T1542.001: System Firmware<br>&nbsp;T1542.002: Component Firmware<br>&nbsp;T1542.003: Bootkit")
    with open(sd+"t1505.html", "w") as t1505html:
        t1505html.write("Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems.</li>\n        <li>Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application.</li>\n        <li>Adversaries may install malicious components to extend and abuse server applications.")
        t1505html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1505html.write("T1505</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence</td>\n        <td>&nbsp;T1505.001: SQL Stored Procedures<br>&nbsp;T1505.002: Transport Agent<br>&nbsp;T1505.003: Web Shell")
    with open(sd+"t1205.html", "w") as t1205html:
        t1205html.write("Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control.</li>\n        <li>Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task.</li>\n        <li>This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control.</li>\n        <li>Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics.</li>\n        <li>After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.</li>\n        <li>Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).</li>\n        <li>The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r, is to use the libpcap libraries to sniff for the packets in question.</li>\n        <li>Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.")
        t1205html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1205html.write("T1205</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Persistence, Defense Evasion, Command &amp; Control</td>\n        <td>&nbsp;T1205.001: Port Knocking")
    # Privilege Escalation
    with open(sd+"t1548.html", "w") as t1548html:
        t1548html.write("Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine.</li>\n        <li>Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.")
        t1548html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1548html.write("T1574</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Privilege Escalation, Defense Evasion</td>\n        <td>&nbsp;T1574.001: Setuid and Setgid<br>&nbsp;T1574.002: Bypass User Access Control<br>&nbsp;T1574.003: Sudo and Sudo Caching<br>&nbsp;T1574.004: Elevated Execution with Prompt")
    with open(sd+"t1134.html", "w") as t1134html:
        t1134html.write("Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process.</li>\n        <li>A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.</li>\n        <li>An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token).</li>\n        <li>An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.</li>\n        <li>Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.")
        t1134html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1134html.write("T1134</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Privilege Escalation, Defense Evasion</td>\n        <td>&nbsp;T1134.001: Token Impersonation/Theft<br>&nbsp;T1134.002: Create Process with Token<br>&nbsp;T1134.003: Make and Impersonate Token<br>&nbsp;T1134.004: Parent PID Spoofing<br>&nbsp;T1134.005: SID-History Injection")
    with open(sd+"t1484.html", "w") as t1484html:
        t1484html.write("Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD).</li>\n        <li>GPOs are containers for group policy settings made up of files stored within a predicable network path \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.</li>\n        <li>Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.</li>\n        <li>Malicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution, and more.</li>\n        <li>Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.</li>\n        <li>For example, publicly available scripts such as New-GPOImmediateTask can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml.</li>\n        <li>In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.")
        t1484html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1484html.write("T1484</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Privilege Escalation, Defense Evasion</td>\n        <td>&nbsp;N/A")
        t1484html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1053\">&nbsp;T1053</a></td>\n        <td>&nbsp;Scheduled Task/Job</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1562\">&nbsp;T1562.001</a></td>\n        <td>&nbsp;Impair Defenses: Disable or Modify Tools</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1105\">&nbsp;T1105</a></td>\n        <td>&nbsp;Ingress Tool Transfer</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1136\">&nbsp;T1136</a></td>\n        <td>&nbsp;Create Account</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1569\">&nbsp;T1569</a></td>\n        <td>&nbsp;System Services: Service Execution")
    with open(sd+"t1611.html", "w") as t1611html:
        t1611html.write("Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.</li>\n        <li>There are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host, and utilizing a privileged container to run commands on the underlying host. Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.")
        t1611html.write("T1611</td>\n        <td>&nbsp;Windows, Linux, Containers</td>\n        <td>&nbsp;Privilege Escalation</td>\n        <td>&nbsp;")
        t1611html.write("N/A")
        t1611html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1612\">&nbsp;T1612</a></td>\n        <td>&nbsp;Build Image on Host")
        t1611html.write("Application Isolation and Sandboxing</td>\n        <td>&nbsp;Ensure all COM alerts and Protected View are enabled.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Behavior Prevention on Endpoint</td>\n        <td>&nbsp;Consider utilizing seccomp, seccomp-bpf, or a similar solution that restricts certain system calls such as mount.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Execution Prevention</td>\n        <td>&nbsp;Use read-only containers and minimal images when possible to prevent the running of commands.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Privileged Account Management</td>\n        <td>&nbsp;Ensure containers are not running as root by default.")
    with open(sd+"t1068.html", "w") as t1068html:
        t1068html.write("Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.</li>\n        <li>Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.</li>\n        <li>When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system.</li>\n        <li>Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable.</li>\n        <li>This may be a necessary step for an adversary compromising a endpoint system that has been properly configured and limits other privilege escalation methods.")
        t1068html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1068html.write("T1068</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Privilege Escalation</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1055.html", "w") as t1055html:
        t1055html.write("Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process.</li>\n        <li>Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.</li>\n        <li>There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific.</li>\n        <li>More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.")
        t1055html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1055html.write("T1055</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Privilege Escalation, Defense Evasion</td>\n        <td>&nbsp;T1574.001: Dynamic-link Library Injection<br>&nbsp;T1574.002: Portable Execution Injection<br>&nbsp;T1574.003: Thread Execution Hijacking<br>&nbsp;T1574.004: Asynchronous Procedure Call<br>&nbsp;T1574.005: Thread Local Storage<br>&nbsp;T1574.008: Ptrace System Calls<br>&nbsp;T1574.009: Proc Memory<br>&nbsp;T1574.011: Extra Windows Memory Injection<br>&nbsp;T1574.012: Process Hollowing<br>&nbsp;T1574.013: Process Doppelganging<br>&nbsp;T1574.014: VDSO Hijacking")
    # Defense Evasion
    with open(sd+"t1612.html", "w") as t1612html:
        t1612html.write("Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.</li>\n        <li>An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image. If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.")
        t1612html.write("<li>docker build</li>\n        <li>Port 2375 & 2376</li>")
        t1612html.write("T1610</td>\n        <td>&nbsp;Containers</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;N/A")
        t1612html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1610\">&nbsp;T1610</a></td>\n        <td>&nbsp;Deploy Container</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1609\">&nbsp;T1609</a></td>\n        <td>&nbsp;Container Administration Command")
    with open(sd+"t1140.html", "w") as t1140html:
        t1140html.write("Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it.</li>\n        <li>Methods for doing that include built-in functionality of malware or by using utilities present on the system.</li>\n        <li>One such example is use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.</li>\n        <li>Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.")
        t1140html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1140html.write("T1140</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1027\">&nbsp;T1027</a></td>\n        <td>&nbsp;Obfuscated Files or Information</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1204\">&nbsp;T1204</a></td>\n        <td>&nbsp;User Execution</td>\n      </tr>\n    </table>\n    <br/>\n    <br/>\n    <table id=\"break\">\n      <tr>\n        <th></th>\n      </tr>\n    </table>\n  </body>\n</html>\n")")
    with open(sd+"t1006.html", "w") as t1006html:
        t1006html.write("Adversaries may directly access a volume to bypass file access controls and file system monitoring.</li>\n        <li>Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures.</li>\n        <li>This technique bypasses Windows file access controls as well as file system monitoring tools.</li>\n        <li>Utilities, such as NinjaCopy, exist to perform these actions in PowerShell.")
        t1006html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1006html.write("T1006</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1480.html", "w") as t1480html:
        t1480html.write("Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target.</li>\n        <li>Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.</li>\n        <li>Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.</li>\n        <li>Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion.</li>\n        <li>While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.")
        t1480html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1480html.write("T1480</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1480.001: Environmental Keying</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1487\">&nbsp;T1487</a></td>\n        <td>&nbsp;Virtualization/Sandbox Evasion</td>\n      </tr>\n    </table>\n    <br/>    <p><font size=\"3\"><strong>Mitigations</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"15%\">Mitigation</th>\n        <th width=\"85%\">Description</th>\n      </tr>\n      <tr>\n        <td>&nbsp;Do Not Mitigate</td>\n        <td>&nbsp;Execution Guardrails likely should not be mitigated with preventative controls because it may protect unintended targets from being compromised. If targeted, efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior if compromised.")")
    with open(sd+"t1211.html", "w") as t1211html:
        t1211html.write("Adversaries may exploit software vulnerabilities in an attempt to collect credentials.</li>\n        <li>Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.</li>\n        <li>Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems.</li>\n        <li>One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.</li>\n        <li>Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.")
        t1211html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1211html.write("T1212</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;N/A")
        t1211html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1518\">&nbsp;T1518</a></td>\n        <td>&nbsp;Security Software Discovery")
    with open(sd+"t1222.html", "w") as t1222html:
        t1222html.write("Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions.</li>\n        <li>File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).</li>\n        <li>Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories.</li>\n        <li>Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, .bash_profile and .bashrc, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.")
        t1222html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1222html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1546\">&nbsp;T1546</a></td>\n        <td>&nbsp;Event Triggered Execution: Accessibility Features</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1037\">&nbsp;T1037</a></td>\n        <td>&nbsp;Boot or Logon Initialization Scripts</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1546\">&nbsp;T1546</a></td>\n        <td>&nbsp;Event Triggered Execution: .bash_profile and .bashrc</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1574\">&nbsp;T1574</a></td>\n        <td>&nbsp;Hijack Execution Flow")
        t1222html.write("T1222</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1222.001: Windows File and Directory Permissions Modification<br>&nbsp;T1222.002: Linux and Mac File and Directory Permissions Modification")
        t1222html.write("Privileged Account Management</td>\n        <td>&nbsp;Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Restrict File and Directory Permissions</td>\n        <td>&nbsp;Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists.")
    with open(sd+"t1564.html", "w") as t1564html:
        t1564html.write("Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system.</li>\n        <li>Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.</li>\n        <li>Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.")
        t1564html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1564html.write("T1564</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1564.001: Hidden Files and Directories<br>&nbsp;T1564.002: Hidden Users<br>&nbsp;T1564.003: Hidden Window<br>&nbsp;T1564.004: NTFS File Attributes<br>&nbsp;T1564.005: Hidden File System<br>&nbsp;T1564.006: Run Virtual Instance")")
    with open(sd+"t1562.html", "w") as t1562html:
        t1562html.write("Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior.</li>\n        <li>This may also span both native defenses as well as supplemental capabilities installed by users and administrators.</li>\n        <li>Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.")
        t1562html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1562html.write("T1562</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1562.001: Disable or Modify Tools<br>&nbsp;T1562.002: Disable Windows Event Logging<br>&nbsp;T1562.003: HISTCONTROL<br>&nbsp;T1562.004: Disable or Modify System Firewall<br>&nbsp;T1562.006: Indicator Blocking<br>&nbsp;T1562.007: Disable or Modify Cloud Firewall")
    with open(sd+"t1070.html", "w") as t1070html:
        t1070html.write("Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware.</li>\n        <li>Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as Bash History and /var/log/*.</li>\n        <li>These actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported.</li>\n        <li>This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.")
        t1070html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1070html.write("T1070</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1070.001: Clear Windows Event Logs<br>&nbsp;T1070.002: Clear Linux or Mac System Logs<br>&nbsp;T1070.003: Clear Command History<br>&nbsp;T1070.004: File Deletion<br>&nbsp;T1070.005: Network Share Connection Removal<br>&nbsp;T1070.006: Timestomp")
        t1070html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1552\">&nbsp;T1552</a></td>\n        <td>&nbsp;Unsecured Credentials: Bash History")
    with open(sd+"t1202.html", "w") as t1202html:
        t1202html.write("Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd.</li>\n        <li>For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.</li>\n        <li>Adversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.")
        t1202html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1202html.write("T1202</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1059\">&nbsp;T1059</a></td>\n        <td>&nbsp;Command and Scripting Interpreter")")
    with open(sd+"t1036.html", "w") as t1036html:
        t1036html.write("Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools.</li>\n        <li>Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation.</li>\n        <li>This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.</li>\n        <li>Renaming abusable system utilities to evade security monitoring is also a form of Masquerading.")
        t1036html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1036html.write("T1036</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1036.001: Invalid Code Signature<br>&nbsp;T1036.002: Right-to-Left Override<br>&nbsp;T1036.003: Rename System Utilities<br>&nbsp;T1036.004: Masquerade Task or Service<br>&nbsp;T1036.005: Match Legitimate Name or Location<br>&nbsp;T1036.006: Space after Filename")
    with open(sd+"t1578.html", "w") as t1578html:
        t1578html.write("An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses.</li>\n        <li>A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.</li>\n        <li>Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure.</li>\n        <li>Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.")
        t1578html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1578html.write("T1578</td>\n        <td>&nbsp;AWS, Azure, GCP</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1578.001: Create Snapshot<br>&nbsp;T1578.002: Create Cloud Instance<br>&nbsp;T1578: Delete Cloud Instance<br>&nbsp;T1578.003: Revert Cloud Instance")
    with open(sd+"t1112.html", "w") as t1112html:
        t1112html.write("Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.</li>\n        <li>Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access.</li>\n        <li>The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.</li>\n        <li>Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.</li>\n        <li>Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.</li>\n        <li>The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.")
        t1112html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1112html.write("T1112</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")
        t1112html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services: SMB/Windows Admin Shares")
    with open(sd+"t1601.html", "w") as t1601html:
        t1601html.write("Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.</li>\n        <li>To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it. This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.")
        t1601html.write("<li>docker build</li>\n        <li>Port 2375 & 2376</li>")
        t1601html.write("T1601</td>\n        <td>&nbsp;Containers</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1601.001: Patch System Image&nbsp;T1601.002: Downgrade System Image<br>")
        t1601html.write("&nbsp;N/A")
    with open(sd+"t1599.html", "w") as t1599html:
        t1599html.write("Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.</li>\n        <li>Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks. They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections. Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications. To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.</li>\n        <li>When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance. By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.")
        t1599html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1599html.write("T1599</td>\n        <td>&nbsp;Network</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1599.001: Network Address Translation Traversal")
        t1599html.write("<a href=\"https://attack.mitre.org/techniques/T1090/003/\">&nbsp;Multi-hop Proxy</td>\n        <td><a href=\"https://attack.mitre.org/techniques/T1020/001/\">&nbsp;Traffic Duplication")
    with open(sd+"t1027.html", "w") as t1027html:
        t1027html.write("Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.</li>\n        <li>Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution.</li>\n        <li>The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. Adversaries may also used compressed or archived scripts, such as JavaScript.</li>\n        <li>Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.</li>\n        <li>Adversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.")
        t1027html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1027html.write("T1027</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1027.001: Binary Padding<br>&nbsp;T1027.002: Software Packing<br>&nbsp;T1027.003: Steganography<br>&nbsp;T1027.004: Complie After Delivery<br>&nbsp;T1027.005: Indicator Removal of Tools")
    with open(sd+"t1207.html", "w") as t1207html:
        t1207html.write("Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC).</li>\n        <li>DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.</li>\n        <li>Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.</li>\n        <li>Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash.</li>\n        <li>This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).</li>\n        <li>The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis.</li>\n        <li>Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.")
        t1207html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1207html.write("T1207</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1134\">&nbsp;T1134</a></td>\n        <td>&nbsp;SID-History Injection")")
    with open(sd+"t1014.html", "w") as t1014html:
        t1014html.write("Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.</li>\n        <li>Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware. Rootkits have been seen for Windows, Linux, and Mac OS X systems.")
        t1014html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1014html.write("T1014</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1218.html", "w") as t1218html:
        t1218html.write("Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries.</li>\n        <li>Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation.</li>\n        <li>Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.")
        t1218html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1218html.write("T1218</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1218.001: Compiled HTML File<br>&nbsp;T1218.002: Control Panel<br>&nbsp;T1218.003: CMSTP<br>&nbsp;T1218.004: InstallUtil<br>&nbsp;T1218.005: Mshta<br>&nbsp;T1218.007: Msiexec<br>&nbsp;T1218.008: Odbcconf<br>&nbsp;T1218.009: Regsvcs/Regasm<br>&nbsp;T1218.010: Regsvr32<br>&nbsp;T1218.011: Rundll32")
    with open(sd+"t1216.html", "w") as t1216html:
        t1216html.write("Adversaries may use scripts signed with trusted certificates to proxy execution of malicious files. Several Microsoft signed scripts that are default on Windows installations can be used to proxy execution of other files.</li>\n        <li>This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.")
        t1216html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1216html.write("T1216</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1216.001: PubPrn")
    with open(sd+"t1553.html", "w") as t1553html:
        t1553html.write("Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust.</li>\n        <li>Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.</li>\n        <li>Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems.")
        t1553html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1553html.write("T1553</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1553.001: Gatekeeper Bypass<br>&nbsp;T1553.002: Code Signing<br>&nbsp;T1553.003: SIP and Trust Provider Hijacking<br>&nbsp;T1553.004: Install Root Certificate")
        t1553html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1222\">&nbsp;T1222</a></td>\n        <td>&nbsp;File and Directory Permissions Modification</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1112\">&nbsp;T1112</a></td>\n        <td>&nbsp;Modify Registry")
    with open(sd+"t1221.html", "w") as t1221html:
        t1221html.write("Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt).</li>\n        <li>OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.</li>\n        <li>Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.</li>\n        <li>Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.</li>\n        <li>These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.</li>\n        <li>This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.")
        t1221html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1221html.write("T1221</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")
        t1221html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1566\">&nbsp;T1566</a></td>\n        <td>&nbsp;Phishing</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1187\">&nbsp;T1187</a></td>\n        <td>&nbsp;Forced Authentication")
    with open(sd+"t1127.html", "w") as t1127html:
        t1127html.write("Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads.</li>\n        <li>There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.</li>\n        <li>These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.")
        t1127html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1127html.write("T1127</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;T1127.001: MSBuild")
    with open(sd+"t1550.html", "w") as t1550html:
        t1550html.write("Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.</li>\n        <li>Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.).</li>\n        <li>Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.</li>\n        <li>Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s).</li>\n        <li>Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through Credential Access techniques.</li>\n        <li>By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.")
        t1550html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1550html.write("T1550</td>\n        <td>&nbsp;Windows, Office 365, SaaS</td>\n        <td>&nbsp;Defense Evasion, Lateral Movement</td>\n        <td>&nbsp;T1550.001: Application Access Token<br>&nbsp;T1550.002: Pass the Hash<br>&nbsp;T1550.003: Pass the Ticket<br>&nbsp;T1550.004: Web Session Cookie")
    with open(sd+"t1535.html", "w") as t1535html:
        t1535html.write("Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.</li>\n        <li>Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements.</li>\n        <li>Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.</li>\n        <li>A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity. For example, AWS GuardDuty is not supported in every region.</li>\n        <li>An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.")
        t1535html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1535html.write("T1535</td>\n        <td>&nbsp;AWS, Azure, GCP</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")
        t1535html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1496\">&nbsp;T1496</a></td>\n        <td>&nbsp;Resource Hijacking")
    with open(sd+"t1497.html", "w") as t1497html:
        t1497html.write("Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox.</li>\n        <li>If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads.</li>\n        <li>Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.</li>\n        <li>Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization.</li>\n        <li>Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox")
        t1497html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1497html.write("T1497</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Defense Evasion, Discovery</td>\n        <td>&nbsp;T1497.001: System Checks<br>&nbsp;T1497.002: User Activity Based Checks<br>&nbsp;T1497.003: Time Based Evasion")")
    with open(sd+"t1600.html", "w") as t1600html:
        t1600html.write("Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications.</li>\n        <li>Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.</li>\n        <li>Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as Modify System Image, Reduce Key Space, and Disable Crypto Hardware, an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts.")
        t1600html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1600html.write("T1600</td>\n        <td>&nbsp;Network</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;T1600.001: Reduce Key Space<br>&nbsp;T1600.002: Disable Crypto Hardware")
        t1600html.write("<a href=\"https://attack.mitre.org/techniques/T1601/\">&nbsp;T1601</a></td>\n        <td>&nbsp;Modify System Image")
    with open(sd+"t1220.html", "w") as t1220html:
        t1220html.write("Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.</li>\n        <li>To support complex operations, the XSL standard includes support for embedded scripting in various languages.</li>\n        <li>Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.</li>\n        <li>Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.")
        t1220html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1220html.write("T1220</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")
        t1220html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1127\">&nbsp;T1127</a></td>\n        <td>&nbsp;Trusted Developer Utilities Proxy Execution</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1047\">&nbsp;T1047</a></td>\n        <td>&nbsp;Windows Management Instrumentation</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1218\">&nbsp;T1218</a></td>\n        <td>&nbsp;Signed Binary Proxy Execution: Regsvr32")
    # Credential Access
    with open(sd+"t1110.html", "w") as t1110html:
        t1110html.write("Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism.</li>\n        <liv>Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.")
        t1110html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1110html.write("T1110</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;T1110.001: Password Guessing<br>&nbsp;T1110.002: Password Cracking<br>&nbsp;T1110.003: Password Spraying<br>&nbsp;T1110.004: Credentials Stuffing")
    with open(sd+"t1555.html", "w") as t1555html:
        t1555html.write("Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.</li>\n        <li>There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.")
        t1555html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1555html.write("T1555</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;T1555.001: Keychain<br>&nbsp;T1555.002: Securityd Memory<br>&nbsp;T1555.003: Credentials from Web Browsers")
    with open(sd+"t1212.html", "w") as t1212html:
        t1212html.write("Adversaries may exploit software vulnerabilities in an attempt to collect credentials.</li>\n        <li>Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.</li>\n        <li>Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems.</li>\n        <li>One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.</li>\n        <li>Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.")
        t1212html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1212html.write("T1212</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;N/A")
        t1212html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1046\">&nbsp;T1046</a></td>\n        <td>&nbsp;Network Service Scanning</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1068\">&nbsp;T1068</a></td>\n        <td>&nbsp;Exploitation for Privilege Escalation")
    with open(sd+"t1187.html", "w") as t1187html:
        t1187html.write("Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.</li>\n        <li>The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing.</li>\n        <li>When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.</li>\n        <li>This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.</li>\n        <li>Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.</li>\n        <li>Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication.</li>\n        <li>An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s).</li>\n        <li>When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server.  With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials.")
        t1187html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1187html.write("T1187</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;N/A")
        t1187html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1221\">&nbsp;T1221</a></td>\n        <td>&nbsp;Template Injection</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1110\">&nbsp;T1110</a></td>\n        <td>&nbsp;Brute Force")
    with open(sd+"t1606.html", "w") as t1606html:
        t1606html.write("Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.</li>\n        <li>Adversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users. The generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.</li>\n        <li>Once forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.")
        t1606html.write("T1559</td>\n        <td>&nbsp;Windows, macOS, Linux, Azure, Google Workspace, Office 365, SaaS</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;T1606.001: Web Cookies<br>&nbsp;T1606.002: SAML Tokens")
        t1606html.write("<a href=\"https://attack.mitre.org/techniques/T1552/004/\">&nbsp;T1552.004</a></td>\n        <td>&nbsp;Private Keys</td>\n      </tr>\n        <td><a href=\"https://attack.mitre.org/techniques/T1550/\">&nbsp;T1550</a></td>\n        <td>&nbsp;Use Alternate Authentication Material")
        t1606html.write("Audit</td>\n        <td>&nbsp;Administrators should perform an audit of all access lists and the permissions they have been granted to access web applications and services. This should be done extensively on all resources in order to establish a baseline, followed up on with periodic audits of new or updated resources. Suspicious accounts/credentials should be investigated and removed. Enable advanced auditing on ADFS. Check the success and failure audit options in the ADFS Management snap-in. Enable Audit Application Generated events on the AD FS farm via Group Policy Object.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Privileged Account Management</td>\n        <td>&nbsp;Restrict permissions and access to the AD FS server to only originate from privileged access workstations.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Software Configuration</td>\n        <td>&nbsp;Configure browsers/applications to regularly delete persistent web credentials (such as cookies).</td>\n      </tr>\n      <tr>\n        <td>&nbsp;User Account Management</td>\n        <td>&nbsp;Ensure that user accounts with administrative rights follow best practices, including use of privileged access workstations, Just in Time/Just Enough Administration (JIT/JEA), and strong authentication. Reduce the number of users that are members of highly privileged Directory Roles.")
    with open(sd+"t1056.html", "w") as t1056html:
        t1056html.write("Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes.</li>\n        <li>Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).")
        t1056html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1056html.write("T1056</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;T1056.001: Keylogging<br>&nbsp;T1056.002: GUI Input Capture<br>&nbsp;T1056.003: Web Portal Capture<br>&nbsp;T1056.004: Credential API Hooking")")
    with open(sd+"t1557.html", "w") as t1557html:
        t1557html.write("Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.</li>\n        <li>By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.</li>\n        <li>Adversaries may leverage the MiTM position to attempt to modify traffic, such as in Transmitted Data Manipulation. Adversaries can also stop traffic from flowing to the appropriate destination, causing denial of service.")
        t1557html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1557html.write("T1557</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access, Collection</td>\n        <td>&nbsp;T1557.001: LLMNR/NBT-NS Poisoning and SMB Relay")
        t1557html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1040\">&nbsp;T1040</a></td>\n        <td>&nbsp;Network Sniffing</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1565\">&nbsp;T1565</a></td>\n        <td>&nbsp;Data Manipulation: Transmitted Data Manipulation")
    with open(sd+"t1040.html", "w") as t1040html:
        t1040html.write("Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.</li>\n        <li>An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.</li>\n        <li>Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.</li>\n        <li>Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.")
        t1040html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1040html.write("T1040</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access, Discovery</td>\n        <td>&nbsp;N/A")
        t1040html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1557\">&nbsp;T1557</a></td>\n        <td>&nbsp;Man-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay")
    with open(sd+"t1003.html", "w") as t1003html:
        t1003html.write("Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software.</li>\n        <li>Credentials can then be used to perform Lateral Movement and access restricted information.</li>\n        <li>Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.")
        t1003html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1003html.write("T1003</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;T1003.001: LSASS Memory<br>&nbsp;T1003.002: Security Account Manager<br>&nbsp;T1003.003: NTDS<br>&nbsp;T1003.004: LSA Secrets<br>&nbsp;T1003.005: Cached Domain Credentials<br>&nbsp;T1003.006: DCSync<br>&nbsp;T1003.007: Proc Filesystem<br>&nbsp;T1003.008: /etc/passwd and /etc/shadow")
    with open(sd+"t1528.html", "w") as t1528html:
        t1528html.write("Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.</li>\n        <li>Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems.</li>\n        <li>An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials.</li>\n        <li>Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.</li>\n        <li>Then, they can send a link through Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.</li>\n        <li>Adversaries have been seen targeting Gmail, Microsoft Outlook, and Yahoo Mail users.")
        t1528html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1528html.write("T1528</td>\n        <td>&nbsp;Azure, Office 365, SaaS</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;N/A")
        t1528html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1566\">&nbsp;T1566</a></td>\n        <td>&nbsp;Phishing: Spearphishing Link</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1550\">&nbsp;T1550</a></td>\n        <td>&nbsp;Use Alternate Authentication Material: Application Access Token")
    with open(sd+"t1558.html", "w") as t1558html:
        t1558html.write("Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket.</li>\n        <li>Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC).</li>\n        <li>Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated.</li>\n        <li>The KDC is responsible for both authentication and ticket granting. Attackers may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.")
        t1558html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1558html.write("T1558</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;T1558.001: Golden Ticket<br>&nbsp;T1558.002: Silver Ticket<br>&nbsp;T1558.003: Kerberoasting")
        t1558html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1550\">&nbsp;T1550</a></td>\n        <td>&nbsp;Use Alternate Authentication Material: Pass the Ticket")
    with open(sd+"t1539.html", "w") as t1539html:
        t1539html.write("An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.</li>\n        <li>Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems.</li>\n        <li>Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.</li>\n        <li>There are several examples of malware targeting cookies from web browsers on the local system. There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a man-in-the-middle proxy that can be set up by an adversary and used in phishing campaigns.</li>\n        <li>After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.")
        t1539html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1539html.write("T1539</td>\n        <td>&nbsp;Windows, macOS, Linux, Office 365, SaaS</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;N/A")
        t1539html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1550\">&nbsp;T1550</a></td>\n        <td>&nbsp;Web Session Cookie")
    with open(sd+"t1111.html", "w") as t1111html:
        t1111html.write("Adversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources.</li>\n        <li>Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.</li>\n        <li>If a smart card is used for two-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use.</li>\n        <li>With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.</li>\n        <li>Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID.</li>\n        <li>Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).</li>\n        <li>Other methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS).</li>\n        <li>If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors.")
        t1111html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1111html.write("T1111</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1552.html", "w") as t1552html:
        t1552html.write("Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).")
        t1552html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1552html.write("T1552</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Credential Access</td>\n        <td>&nbsp;T1552.001: Credentials In Files<br>&nbsp;T1552.002: Credentials In Registry<br>&nbsp;T1552.003: Bash History<br>&nbsp;T1552.004: Private Keys<br>&nbsp;T1552.005: Cloud Instance Metadata API<br>&nbsp;T1552.006: Group Policy Preferences")
    # Discovery
    with open(sd+"t1087.html", "w") as t1087html:
        t1087html.write("Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.")
        t1087html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1087html.write("T1087</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;T1087.001: Local Account<br>&nbsp;T1087.002: Domain Account<br>&nbsp;T1087.003: Email Account<br>&nbsp;T1087.004: Cloud Account")
    with open(sd+"t1010.html", "w") as t1010html:
        t1010html.write("Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.")
        t1010html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1010html.write("T1010</td>\n        <td>&nbsp;Windows, macOS</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1217.html", "w") as t1217html:
        t1217html.write("Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.</li>\n        <li>Browser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.</li>\n        <li>Specific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.")
        t1217html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1217html.write("T1217</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1552\">&nbsp;T1552</a></td>\n        <td>&nbsp;Unsecured Credentials: Credentials In Files")")
    with open(sd+"t1580.html", "w") as t1580html:
        t1580html.write("An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.</li>\n        <li>Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, as well as the ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request. Similarly, GCP's Cloud SDK CLI provides the gcloud compute instances list command to list all Google Compute Engine instances in a project, and Azure's CLI command az vm list lists details of virtual machines.</li>\n        <li>An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.")
        t1580html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1580html.write("T1580</td>\n        <td>&nbsp;IaaS</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")
        t1580html.write("<a href=\"https://attack.mitre.org/techniques/T1526/\">&nbsp;T1526</a></td>\n        <td>&nbsp;Cloud Service Discovery")
    with open(sd+"t1538.html", "w") as t1538html:
        t1538html.write("An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features.</li>\n        <li>For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.</li>\n        <li>Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.")
        t1538html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1538html.write("T1538</td>\n        <td>&nbsp;AWS, Azure, GCP, Office 365</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1526.html", "w") as t1526html:
        t1526html.write("An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS).</li>\n        <li>Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc.</li>\n        <li>Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.</li>\n        <li>Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.")
        t1526html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1526html.write("T1526</td>\n        <td>&nbsp;AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1613.html", "w") as t1613html:
        t1613html.write("Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.</li>\n        <li>These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment’s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary’s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.")
        t1613html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1613html.write("T1613</td>\n        <td>&nbsp;Containers</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")
        t1613html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1059\">&nbsp;T1059</a></td>\n        <td>&nbsp;Command and Scripting Interpreter")
    with open(sd+"t1482.html", "w") as t1482html:
        t1482html.write("Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.</li>\n        <li>Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting.</li>\n        <li>Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.")
        t1482html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1482html.write("T1482</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")
        t1482html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1134\">&nbsp;T1134</a></td>\n        <td>&nbsp;Access Token Manipulation: SID-History Injection</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1550\">&nbsp;T1550</a></td>\n        <td>&nbsp;Use Alternate Authentication Material: Pass the Ticket</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1558\">&nbsp;T1558</a></td>\n        <td>&nbsp;Steal or Forge Kerberos Tickets: Kerberoasting")
    with open(sd+"t1083.html", "w") as t1083html:
        t1083html.write("Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.</li>\n        <li>Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.</li>\n        <li>Many command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API.")
        t1083html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1083html.write("T1083</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1106\">&nbsp;T1106</a></td>\n        <td>&nbsp;Native AP")")
    with open(sd+"t1046.html", "w") as t1046html:
        t1046html.write("Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.</li>\n        <li>Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.")
        t1046html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1046html.write("T1046</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1135.html", "w") as t1135html:
        t1135html.write("Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.</li>\n        <li>File sharing over a Windows network occurs over the SMB protocol. Net can be used to query a remote system for available shared drives using the net view \\remotesystem command. It can also be used to query shared drives on the local system using net share.</li>\n        <li>Cloud virtual networks may contain remote network shares or file storage services accessible to an adversary after they have obtained access to a system. For example, AWS, GCP, and Azure support creation of Network File System (NFS) shares and Server Message Block (SMB) shares that may be mapped on endpoint or cloud-based systems.")
        t1135html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1135html.write("T1135</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1201.html", "w") as t1201html:
        t1201html.write("Adversaries may attempt to access detailed information about the password policy used within an enterprise network. Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through Brute Force.</li>\n        <li>This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).</li>\n        <li>Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), chage -l , cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies.")
        t1201html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1201html.write("T1221</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")
        t1201html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1110\">&nbsp;T1110</a></td>\n        <td>&nbsp;Brute Force")
    with open(sd+"t1120.html", "w") as t1120html:
        t1120html.write("Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage.</li>\n        <li>The information may be used to enhance their awareness of the system and network environment or may be used for further actions.")
        t1120html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1120html.write("T1120</td>\n        <td>&nbsp;Windows, macOS</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1069.html", "w") as t1069html:
        t1069html.write("Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.")
        t1069html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1069html.write("T1069</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;T1069.001: Local Groups<br>&nbsp;T1069.002: Domain Groups<br>&nbsp;T1069.003: Cloud Groups")")
    with open(sd+"t1057.html", "w") as t1057html:
        t1057html.write("Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.</li>\n        <li>In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.")
        t1057html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1057html.write("T1057</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1057\">&nbsp;T1057</a></td>\n        <td>&nbsp;Native API")")
    with open(sd+"t1012.html", "w") as t1012html:
        t1012html.write("Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.</li>\n        <li>The Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network.</li>\n        <li>Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.")
        t1012html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1012html.write("T1012</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1018.html", "w") as t1018html:
        t1018html.write("Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as Ping or net view using Net.</li>\n        <li>Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems.</li>\n        <li>Specific to macOS, the bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.</li>\n        <li>Within IaaS (Infrastructure as a Service) environments, remote systems include instances and virtual machines in various states, including the running or stopped state. Cloud providers have created methods to serve information about remote systems, such as APIs and CLIs.</li>\n        <li>For example, AWS provides a DescribeInstances API within the Amazon EC2 API and a describe-instances command within the AWS CLI that can return information about all instances within an account. Similarly, GCP's Cloud SDK CLI provides the gcloud compute instances list command to list all Google Compute Engine instances in a project, and Azure's CLI az vm list lists details of virtual machines.")
        t1018html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1018html.write("T1018</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1518.html", "w") as t1518html:
        t1518html.write("Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment.</li>\n        <li>Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.</li>\n        <li>Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.")
        t1518html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1518html.write("T1518</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, Saas</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;T1518.001: Security Software Discovery</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1068\">&nbsp;T1068</a></td>\n        <td>&nbsp;Exploitation for Privilege Escalation")")
    with open(sd+"t1082.html", "w") as t1082html:
        t1082html.write("An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.</li>\n        <li>Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.</li>\n        <li>Tools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS systemsetup command, but it requires administrative privileges.</li>\n        <li>Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.")
        t1082html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1082html.write("T1082</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Defense Evasion</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1614.html", "w") as t1614html:
        t1614html.write("Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.</li>\n        <li>Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.</li>\n        <li>Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.")
        t1614html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1614html.write("T1614</td>\n        <td>&nbsp;Windows, macOS, Linux, IaaS</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")
        t1614html.write("</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1016.html", "w") as t1016html:
        t1016html.write("Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.</li>\n        <li>Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.")
        t1016html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1016html.write("T1016</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1049.html", "w") as t1049html:
        t1049html.write("Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.</li>\n        <li>An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected</li>\n        <li>The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.</li>\n        <li>Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to \"net session\".")
        t1049html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1049html.write("T1049</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1033.html", "w") as t1033html:
        t1033html.write("Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping.</li>\n        <li>The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs.</li>\n        <li>Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.</li>\n        <li>Utilities and commands that acquire this information include whoami. In Mac and Linux, the currently logged in user can be identified with w and who.")
        t1033html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1033html.write("T1033</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1003\">&nbsp;T1003</a></td>\n        <td>&nbsp;OS Credential Dumping")")
    with open(sd+"t1007.html", "w") as t1007html:
        t1007html.write("Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using Tasklist, and \"net start\" using Net, but adversaries may also use other tools as well.</li>\n        <li>Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.")
        t1007html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1007html.write("T1007</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1124.html", "w") as t1124html:
        t1124html.write("An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.</li>\n        <li>System time information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz.</li>\n        <li>The information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting.")
        t1124html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1124html.write("T1124</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Discovery</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1053\">&nbsp;T1053</a></td>\n        <td>&nbsp;Scheduled Task/Job")")
    # Lateral Movement
    with open(sd+"t1210.html", "w") as t1210html:
        t1210html.write("Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network.</li>\n        <li>Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.</li>\n        <li>A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.</li>\n        <li>An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Scanning or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities, or security software that may be used to detect or contain remote exploitation.</li>\n        <li>Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.</li>\n        <li>There are several well-known vulnerabilities that exist in common services such as SMB and RDP as well as applications that may be used within internal networks such as MySQL and web server services.</li>\n        <li>Depending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.")
        t1210html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1210html.write("T1210</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Lateral Movement</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1534.html", "w") as t1534html:
        t1534html.write("Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment.</li>\n        <li>Internal spearphishing is multi-staged attack where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user.</li>\n        <li>Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.</li>\n        <li>Adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic email login interfaces.</li>\n        <li>There have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process.</li>\n        <li>The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the attack and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.")
        t1534html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1534html.write("T1534</td>\n        <td>&nbsp;Windows, macOS, Linux, Office 365, SaaS</td>\n        <td>&nbsp;Lateral Movement</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1566\">&nbsp;T1566</a></td>\n        <td>&nbsp;Phishing: Spearphishing Attachment</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1566\">&nbsp;T1566</a></td>\n        <td>&nbsp;Phishing: Spearphishing Link</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1056\">&nbsp;T1056</a></td>\n        <td>&nbsp;Input Capture")")
    with open(sd+"t1570.html", "w") as t1570html:
        t1570html.write("Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation.</li>\n        <li>Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with SMB/Windows Admin Shares or Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.")
        t1570html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1570html.write("T1570</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Lateral Movement</td>\n        <td>&nbsp;N/A")
        t1570html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services: SMB/Windows Admin Shares</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services: Remote Desktop Protocol")
    with open(sd+"t1563.html", "w") as t1563html:
        t1563html.write("Adversaries may take control of preexisting sessions with remote services to move laterally in an environment.</li>\n        <li>Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.</li>\n        <li>Adversaries may commandeer these sessions to carry out actions on remote systems. Remote Service Session Hijacking differs from use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts.")
        t1563html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1563html.write("T1563</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Lateral Movement</td>\n        <td>&nbsp;T1563.001: SSH Hijacking<br>&nbsp;T1563.002: RDP Hijacking")
        t1563html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts")
    with open(sd+"t1021.html", "w") as t1021html:
        t1021html.write("Adversaries may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.</li>\n        <li>In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network.</li>\n        <li>If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).")
        t1021html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1021html.write("T1021</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Lateral Movement</td>\n        <td>&nbsp;T1021.001: Remote Desktop Protocol<br>&nbsp;T1021.002: SMB/Windows Admin Shares<br>&nbsp;T1021.003: Distributed Component Object Model<br>&nbsp;T1021.004: SSH<br>&nbsp;T1021.005: VNC<br>&nbsp;T1021.006: Windows Remote Management")
        t1021html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts")
    with open(sd+"t1080.html", "w") as t1080html:
        t1080html.write("Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files.</li>\n        <li>Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.</li>\n        <li>A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories.</li>\n        <li>The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts.</li>\n        <li>Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code.</li>\n        <li>The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.")
        t1080html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1080html.write("T1221</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Lateral Movement</td>\n        <td>&nbsp;N/A")
        t1080html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1547\">&nbsp;T1547</a></td>\n        <td>&nbsp;Boot or Logon Autostart Execution: Shortcut Modification</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1036\">&nbsp;T1036</a></td>\n        <td>&nbsp;Masquerading</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1564\">&nbsp;T1564</a></td>\n        <td>&nbsp;Hide Artifacts: Hidden Files and Directories")
    # Collection
    with open(sd+"t1560.html", "w") as t1560html:
        t1560html.write("An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network.</li>\n        <li>Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.</li>\n        <li>Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.")
        t1560html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1560html.write("T1560</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;T1560.001: Archive via Utility<br>&nbsp;T1560.002: Archive via Library<br>&nbsp;T1560.003: Archive via Custom Method")
    with open(sd+"t1123.html", "w") as t1123html:
        t1123html.write("Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths.</li>\n        <li>This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess, LoadLibrary, etc. of the Win32 API.")
        t1123html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1123html.write("T1129</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")
        t1123html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1106\">&nbsp;T1106</a></td>\n        <td>&nbsp;Native API")
    with open(sd+"t1119.html", "w") as t1119html:
        t1119html.write("Once established within a system or network, an adversary may use automated techniques for collecting internal data.</li>\n        <li>Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools.</li>\n        <li>This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files.")
        t1119html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1119html.write("T1119</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")
        t1119html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1059\">&nbsp;T1059</a></td>\n        <td>&nbsp;Command and Scripting Interpreter</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1083\">&nbsp;T1083</a></td>\n        <td>&nbsp;File and Directory Discovery</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1570\">&nbsp;T1570</a></td>\n        <td>&nbsp;Lateral Tool Transfer")
    with open(sd+"t1115.html", "w") as t1115html:
        t1115html.write("Adversaries may collect data stored in the clipboard from users copying information within or between applications.</li>\n        <li>In Windows, Applications can access clipboard data by using the Windows API. OSX provides a native command, pbpaste, to grab clipboard contents.")
        t1115html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1115html.write("T1115</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1530.html", "w") as t1530html:
        t1530html.write("Adversaries may access data objects from improperly secured cloud storage.</li>\n        <li>Many cloud service providers offer solutions for online data storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application.</li>\n        <li>Data from these solutions can be retrieved directly using the cloud provider's APIs. Solution providers typically offer security guides to help end users configure systems.</li>\n        <li>Misconfiguration by end users is a common problem. There have been numerous incidents where cloud storage has been improperly secured (typically by unintentionally allowing public access by unauthenticated users or overly-broad access by all users), allowing open access to credit cards, personally identifiable information, medical records, and other sensitive information.</li>\n        <li>Adversaries may also obtain leaked credentials in source repositories, logs, or other means as a way to gain access to cloud storage objects that have access permission controls.")
        t1530html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1530html.write("T1530</td>\n        <td>&nbsp;AWS, Azure, GCP</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1602.html", "w") as t1602html:
        t1602html.write("Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.</li>\n        <li>Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.")
        t1602html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1602html.write("T1559</td>\n        <td>&nbsp;Network</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;T1602.001: SNMP (MIB Dump)<br>&nbsp;T1602.002: Network Device Configuration Dump")
        t1602html.write("</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1213.html", "w") as t1213html:
        t1213html.write("Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.</li>\n        <li>Adversaries may also collect information from shared storage repositories hosted on cloud infrastructure or in software-as-a-service (SaaS) applications, as storage is one of the more fundamental requirements for cloud services and systems.</li>\n        <li>The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:</li>\n        <ul>\n          <li>Policies, procedures, and standards</li>\n          <li>Physical / logical network diagrams</li>\n          <li>System architecture diagrams</li>\n          <li>Technical system documentation</li>\n          <li>Testing / development credentials</li>\n          <li>Work / project schedules</li>\n          <li>Source code snippets</li>\n          <li>Links to network shares and other internal resources</li>\n        </ul>\n        <li>Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include Sharepoint, Confluence, and enterprise databases such as SQL Server.")
        t1213html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1213html.write("T1213</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;T1213.001: Confluence<br>&nbsp;T1213.002: Sharepoint")
    with open(sd+"t1005.html", "w") as t1005html:
        t1005html.write("Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration.</li>\n        <li>Adversaries may do this using a Command and Scripting Interpreter, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system.")
        t1005html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1005html.write("T1005</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1059\">&nbsp;T1059</a></td>\n        <td>&nbsp;Command and Scripting Interpreter</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1119\">&nbsp;T1119</a></td>\n        <td>&nbsp;Automated Collection")")
    with open(sd+"t1039.html", "w") as t1039html:
        t1039html.write("Adversaries may search network shares on computers they have compromised to find files of interest.</li>\n        <li>Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration.</li>\n        <li>Interactive command shells may be in use, and common functionality within cmd may be used to gather information.")
        t1039html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1039html.write("T1039</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1025.html", "w") as t1025html:
        t1025html.write("Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration.</li>\n        <li>Interactive command shells may be in use, and common functionality within cmd may be used to gather information.</li>\n        <li>Some adversaries may also use Automated Collection on removable media.")
        t1025html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1025html.write("T1025</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1119\">&nbsp;T1119</a></td>\n        <td>&nbsp;Automated Collection")")
    with open(sd+"t1074.html", "w") as t1074html:
        t1074html.write("Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.</li>\n        <li>In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.</li>\n        <li>Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.")
        t1074html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1074html.write("T1074</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;T1074.001: Local Data Staging<br>&nbsp;T1074.002: Remote Data Staging</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1560\">&nbsp;T1560</a></td>\n        <td>&nbsp;Archive Collected Data</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1578\">&nbsp;T1578</a></td>\n        <td>&nbsp;Modify Cloud Compute Infrastructure: Create Cloud Instance")")
    with open(sd+"t1114.html", "w") as t1114html:
        t1114html.write("Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.")
        t1114html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1114html.write("T1114</td>\n        <td>&nbsp;Windows, Office 365</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;T1114.001: Local Email Collection<br>&nbsp;T1114.002: Remote Email Collection<br>&nbsp;T1114.003: Email Forwarding Rule")
    with open(sd+"t1185.html", "w") as t1185html:
        t1185html.write("Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.</li>\n        <li>A specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet.</li>\n        <li>Browser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic.</li>\n        <li>This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly.</li>\n        <li>With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication.")
        t1185html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1185html.write("T1185</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1113.html", "w") as t1113html:
        t1113html.write("Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.</li>\n        <li>Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.")
        t1113html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1113html.write("T1113</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1125.html", "w") as t1125html:
        t1125html.write("An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.</li>\n        <li>Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.</li>\n        <li>In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.")
        t1125html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1125html.write("T1125</td>\n        <td>&nbsp;Windows, macOS</td>\n        <td>&nbsp;Collection</td>\n        <td>&nbsp;N/A")")
    # Command and Control
    with open(sd+"t1071.html", "w") as t1071html:
        t1071html.write("Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.</li>\n        <li>Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.")
        t1071html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1071html.write("T1071</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;T1071.001: Web Protocols<br>&nbsp;T1071.002: File Transfer Protocols<br>&nbsp;T1071.003: Mail Protocols<br>&nbsp;T1071.004: DNS")
    with open(sd+"t1092.html", "w") as t1092html:
        t1092html.write("Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system.</li>\n        <li>Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media.</li>\n        <li>Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.")
        t1092html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1092html.write("T1092</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
        t1092html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1091\">&nbsp;T1091</a></td>\n        <td>&nbsp;Replication Through Removable Media")
    with open(sd+"t1132.html", "w") as t1132html:
        t1132html.write("Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system.</li>\n        <li>Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.")
        t1132html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1132html.write("T1132</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;T1132.001: Standard Encoding<br>&nbsp;T1132.002: Non-Standard Encoding")
    with open(sd+"t1001.html", "w") as t1001html:
        t1001html.write("Adversaries may obfuscate command and control traffic to make it more difficult to detect.</li>\n        <li>Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen.</li>\n        <li>This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.")
        t1001html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1001html.write("T1001</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;T1001.001: Junk Data<br>&nbsp;T1001.002: Steganography<br>&nbsp;T1001.003: Protocol Impersonation")
    with open(sd+"t1568.html", "w") as t1568html:
        t1568html.write("Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations.</li>\n        <li>This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications.</li>\n        <li>These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.</li>\n        <li>Adversaries may use dynamic resolution for the purpose of Fallback Channels.</li>\n        <li>When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.")
        t1568html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1568html.write("T1568</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;T1568.001: Fast Flux DNS<br>&nbsp;T1568.002: Domain Generation Algorithms<br>&nbsp;T1568.003: DNS Calculation")
        t1568html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1008\">&nbsp;T1008</a></td>\n        <td>&nbsp;Fallback Channels")
    with open(sd+"t1573.html", "w") as t1573html:
        t1573html.write("Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.</li>\n        <li>Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.")
        t1573html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1573html.write("T1573</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;T1573.001: Symmetric Cryptography<br>&nbsp;T1573.002: Asymmetric Cryptography")
    with open(sd+"t1008.html", "w") as t1008html:
        t1008html.write("Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.")
        t1008html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1008html.write("T1008</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1105.html", "w") as t1105html:
        t1105html.write("Adversaries may transfer tools or other files from an external system into a compromised environment.</li>\n        <li>Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP.</li>\n        <li>Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.")
        t1105html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1105html.write("T1572</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1104.html", "w") as t1104html:
        t1104html.write("Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.</li>\n        <li>Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files.</li>\n        <li>A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.</li>\n        <li>The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.")
        t1104html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1104html.write("T1104</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
        t1104html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1008\">&nbsp;T1008</a></td>\n        <td>&nbsp;Fallback Channels")
    with open(sd+"t1095.html", "w") as t1095html:
        t1095html.write("Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.</li>\n        <li>Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).</li>\n        <li>ICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.")
        t1095html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1095html.write("T1095</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1571.html", "w") as t1571html:
        t1571html.write("Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443.</li>\n        <li>Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.")
        t1571html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1571html.write("T1571</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1572.html", "w") as t1572html:
        t1572html.write("Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems.</li>\n        <li>Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN).</li>\n        <li>Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.</li>\n        <li>There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.</li>\n        <li>Protocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.</li>\n        <li>Adversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.")
        t1572html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1572html.write("T1572</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
        t1572html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1568\">&nbsp;T1568</a></td>\n        <td>&nbsp;Dynamic Resolution</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1090\">&nbsp;T1090</a></td>\n        <td>&nbsp;Proxy</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1001\">&nbsp;T1001</a></td>\n        <td>&nbsp;Data Obfuscation: Protocol Impersonation")
    with open(sd+"t1090.html", "w") as t1090html:
        t1090html.write("Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.</li>\n        <li>Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.</li>\n        <li>Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.")
        t1090html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1090html.write("T1090</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;T1090.001: Internal Proxy<br>&nbsp;T1090.002: External Proxy<br>&nbsp;T1090.003: Multi-hop Proxy<br>&nbsp;T1090.004: Domain Fronting")
    with open(sd+"t1219.html", "w") as t1219html:
        t1219html.write("An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.</li>\n        <li>Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.</li>\n        <li>Remote access tools may be established and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.</li>\n        <li>Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.")
        t1219html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1219html.write("T1219</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1102.html", "w") as t1102html:
        t1102html.write("Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise.</li>\n        <li>Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.</li>\n        <li>Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).")
        t1102html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1102html.write("T1102</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Command &amp; Control</td>\n        <td>&nbsp;T1102.001: Dead Drop Resolver<br>&nbsp;T1102.002: Bidirectional Communication<br>&nbsp;T1102.003: One-Way Communication")
    # Exfiltration
    with open(sd+"t1020.html", "w") as t1020html:
        t1020html.write("Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.</li>\n        <li>When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.")
        t1020html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1020html.write("T1030</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1041\">&nbsp;T1041</a></td>\n        <td>&nbsp;Exfiltration Over C2 Channel</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1048\">&nbsp;T1048</a></td>\n        <td>&nbsp;Exfiltration Over Alternative Protocol")")
    with open(sd+"t1030.html", "w") as t1030html:
        t1030html.write("An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.")
        t1030html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1030html.write("T1030</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1048.html", "w") as t1048html:
        t1048html.write("Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.</li>\n        <li>Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and/or obfuscate these alternate channels.</li>\n        <li>Exfiltration Over Alternative Protocol can be done using various common operating system utilities such as Net/SMB or FTP.")
        t1048html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1048html.write("T1048</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;T1048.001: Exfiltration Over Symmetric Encrypted Non-C2 Protocol<br>&nbsp;T1048.002: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol<br>&nbsp;T1048.003: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol</td>\n      </tr>\n    </table>\n    <br>\n    <p><font size=\"3\"><strong>Mitigations</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"15%\">Mitigation</th>\n        <th width=\"85%\">Description</th>\n      </tr>\n      <tr>\n        <td>&nbsp;Filter Network Traffic</td>\n        <td>&nbsp;Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Network Intrusion Prevention</td>\n        <td>&nbsp;Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Network Segmentation</td>\n        <td>&nbsp;Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network.")")
    with open(sd+"t1041.html", "w") as t1041html:
        t1041html.write("Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.")
        t1041html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1041html.write("T1041</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br>\n    <p><font size=\"3\"><strong>Mitigations</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"15%\">Mitigation</th>\n        <th width=\"85%\">Description</th>\n      </tr>\n      <tr>\n        <td>&nbsp;Network Intrusion Prevention</td>\n        <td>&nbsp;Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions.<br>&nbsp;Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools.")")
    with open(sd+"t1011.html", "w") as t1011html:
        t1011html.write("Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.</li>\n        <li>Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.")
        t1011html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1011html.write("T1011</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;T1011.001: Exfiltration Over Bluetooth</td>\n      </tr>\n    </table>\n    <br>\n    <p><font size=\"3\"><strong>Mitigations</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"15%\">Mitigation</th>\n        <th width=\"85%\">Description</th>\n      </tr>\n      <tr>\n        <td>&nbsp;Operating System Configuration</td>\n        <td>&nbsp;Prevent the creation of new network adapters where possible.")")
    with open(sd+"t1052.html", "w") as t1052html:
        t1052html.write("Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user.</li>\n        <li>Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.")
        t1052html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1052html.write("T1052</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;T1052.001: Exfiltration over USB</td>\n      </tr>\n    </table>\n    <br>\n    <p><font size=\"3\"><strong>Mitigations</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"15%\">Mitigation</th>\n        <th width=\"85%\">Description</th>\n      </tr>\n      <tr>\n        <td>&nbsp;Disable or Remove Feature or Program</td>\n        <td>&nbsp;Disable Autorun if it is unnecessary. Disallow or restrict removable media at an organizational policy level if they are not required for business operations.</td>\n      </tr>\n      <tr>\n        <td>&nbsp;Limit Hardware Installation</td>\n        <td>&nbsp;Limit the use of USB devices and removable media within a network.")")
    with open(sd+"t1567.html", "w") as t1567html:
        t1567html.write("Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel.</li>\n        <li>Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise.</li>\n        <li>Firewall rules may also already exist to permit traffic to these services.</li>\n        <li>Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.")
        t1567html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1567html.write("T1567</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Execution</td>\n        <td>&nbsp;T1567.001: Exfiltration to Code Repository<br>&nbsp;T1567.002: Exfiltration to Cloud Storage")
    with open(sd+"t1029.html", "w") as t1029html:
        t1029html.write("Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.")
        t1029html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1029html.write("T1029</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1041\">&nbsp;T1041</a></td>\n        <td>&nbsp;Exfiltration Over C2 Channel</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1048\">&nbsp;T1048</a></td>\n        <td>&nbsp;Exfiltration Over Alternative Protocol</td>\n      </tr>\n    </table>\n    <p><font size=\"3\"><strong>Mitigations</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"15%\">Mitigation</th>\n        <th width=\"85%\">Description</th>\n      </tr>\n      <tr>\n        <td>&nbsp;Network Intrusion Prevention</td>\n        <td>&nbsp;Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions.<br>&nbsp;Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools.")")
    with open(sd+"t1537.html", "w") as t1537html:
        t1537html.write("Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.</li>\n        <li>A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider.</li>\n        <li>Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.</li>\n        <li>Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.")
        t1537html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1537html.write("T1537</td>\n        <td>&nbsp;AWS, Azure, GCP</td>\n        <td>&nbsp;Exfiltration</td>\n        <td>&nbsp;N/A")
    # Impact
    with open(sd+"t1531.html", "w") as t1531html:
        t1531html.write("Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.</li>\n        <li>Adversaries may also subsequently log off and/or reboot boxes to set malicious changes into place.")
        t1531html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1531html.write("T1531</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1485.html", "w") as t1485html:
        t1485html.write("Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.</li>\n        <li>Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.</li>\n        <li>Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.</li>\n        <li>To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.")
        t1485html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1485html.write("T1485</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A")
        t1485html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1561\">&nbsp;T1561</a></td>\n        <td>&nbsp;Disk Wipe: Disk Content Wipe</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1561\">&nbsp;T1561</a></td>\n        <td>&nbsp;Disk Wipe: Disk Structure Wipe</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1003\">&nbsp;T1003</a></td>\n        <td>&nbsp;OS Credential Dumping</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services: SMB/Windows Admin Shares")
    with open(sd+"t1486.html", "w") as t1486html:
        t1486html.write("Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key.</li>\n        <li>This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.</li>\n        <li>In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.</li>\n        <li>To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.")
        t1486html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1486html.write("T1486</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A")
        t1486html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1003\">&nbsp;T1003</a></td>\n        <td>&nbsp;OS Credential Dumping</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services: SMB/Windows Admin Shares")
    with open(sd+"t1565.html", "w") as t1565html:
        t1565html.write("Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.</li>\n        <li>The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary.</li>\n        <li>For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.")
        t1565html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1565html.write("T1565</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;T1565.001: Stored Data Manipulation<br>&nbsp;T1565.002: Transmitted Data Manipulation<br>&nbsp;T1565.003: Runtime Data Manipulation")
    with open(sd+"t1491.html", "w") as t1491html:
        t1491html.write("Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion.</li>\n        <li>Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.")
        t1491html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1491html.write("T1491</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;T1491.001: Internal Defacement<br>&nbsp;T1491.002: External Defacement")
    with open(sd+"t1561.html", "w") as t1561html:
        t1561html.write("Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources.</li>\n        <li>With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.</li>\n        <li>To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.")
        t1561html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1561html.write("T1561</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;T1561.001 Disk Content Wipe<br>&nbsp;T1561.002: Disk Structure Wipe")
        t1561html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1078\">&nbsp;T1078</a></td>\n        <td>&nbsp;Valid Accounts</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1003\">&nbsp;T1003</a></td>\n        <td>&nbsp;OS Credential Dumping</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1021\">&nbsp;T1021</a></td>\n        <td>&nbsp;Remote Services: SMB/Windows Admin Shares")
    with open(sd+"t1499.html", "w") as t1499html:
        t1499html.write("Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition.</li>\n        <li>Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.</li>\n        <li>An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service.</li>\n        <li>These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them.</li>\n        <li>Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components.</li>\n        <li>A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS). To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n        <li>Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection.</li>\n        <li>This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.</li>\n        <li>Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet.</li>\n        <li>Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack.</li>\n        <li>In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources.</li>\n        <li>In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.</li>\n        <li>In cases where traffic manipulation is used, there may be points in the the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume.</li>\n        <li>This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n        <li>For attacks attempting to saturate the providing network, see Network Denial of Service.")
        t1499html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1499html.write("T1499</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;T1499.001: OS Exhaustion Flood<br>&nbsp; T1499.002: Service Exhaustion Flood<br>&nbsp; T1499.003: Application Exhaustion Flood<br>&nbsp; T1499.004: Application or System Exploitation")
        t1499html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1498\">&nbsp;T1498</a></td>\n        <td>&nbsp;Network Denial of Service")
    with open(sd+"t1495.html", "w") as t1495html:
        t1495html.write("Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot.</li>\n        <li>Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality.</li>\n        <li>These devices could include the motherboard, hard drive, or video cards.")
        t1495html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1495html.write("T1495</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A")
    with open(sd+"t1490.html", "w") as t1490html:
        t1490html.write("Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.</li>\n        <li>Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features.</li>\n        <li>Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.")
        t1490html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1490html.write("T1490</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A")
        t1490html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1485\">&nbsp;T1485</a></td>\n        <td>&nbsp;Data Destruction</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1486\">&nbsp;T1486</a></td>\n        <td>&nbsp;Data Encrypted for Impact")
    with open(sd+"t1498.html", "w") as t1498html:
        t1498html.write("Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users.<li>Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications.<li>Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.</li>\n        <li>A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on.<li>For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet.<li>This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).</li>\n        <li>To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.</li>\n        <li>Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection.<li>This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.</li>\n        <li>For DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.")
        t1498html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1498html.write("T1499</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP, Office 365, SaaS</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;T1498.001: Direct Network Flood<br>&nbsp; T1498.002: Reflection Amplification")
        t1498html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1499\">&nbsp;T1499</a></td>\n        <td>&nbsp;Endpoint Denial of Service")
    with open(sd+"t1496.html", "w") as t1496html:
        t1496html.write("Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems which may impact system and/or hosted service availability.</li>\n        <li>One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.</li>\n        <li>Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.")
        t1496html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1496html.write("T1496</td>\n        <td>&nbsp;Windows, macOS, Linux, AWS, Azure, GCP</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A")")
    with open(sd+"t1489.html", "w") as t1489html:
        t1489html.write("Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.</li>\n        <li>Adversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable.</li>\n        <li>Services may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.")
        t1489html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1489html.write("T1489</td>\n        <td>&nbsp;Windows</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A")
        t1489html.write("<a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1485\">&nbsp;T1485</a></td>\n        <td>&nbsp;Data Destruction</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1486\">&nbsp;T1486</a></td>\n        <td>&nbsp;Data Encrypted for Impact")
    with open(sd+"t1529.html", "w") as t1529html:
        t1529html.write("Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine.</li>\n        <li>In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer. Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.</li>\n        <li>Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.")
        t1529html.write("<li></li>\n        <li></li>\n        <li></li>\n        <li></li>")
        t1529html.write("T1529</td>\n        <td>&nbsp;Windows, macOS, Linux</td>\n        <td>&nbsp;Impact</td>\n        <td>&nbsp;N/A</td>\n      </tr>\n    </table>\n    <br/>\n    <p><font size=\"3\"><strong>Related Techniques</strong></font></p>\n    <table id=\"id\">\n      <tr>\n        <th width=\"5%\">ID</th>\n        <th width=\"95%\">Title</th>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1561\">&nbsp;T1561</a></td>\n        <td>&nbsp;Disk Structure Wipe</td>\n      </tr>\n      <tr>\n        <td><a href=\"http://127.0.0.1:8000/en-US/app/elrond/t1490\">&nbsp;T1490</a></td>\n        <td>&nbsp;Inhibit System Recovery")")
